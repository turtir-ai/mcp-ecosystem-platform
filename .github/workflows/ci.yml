name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Backend Testing
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-benchmark
    
    - name: 🔍 Lint with flake8
      run: |
        cd backend
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🎯 Type check with mypy
      run: |
        cd backend
        mypy app --ignore-missing-imports
    
    - name: 🧪 Run tests with pytest
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=junit.xml -n auto
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET: test-jwt-secret-for-ci
        ENVIRONMENT: testing
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: 📈 Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: backend/junit.xml
        check_name: Backend Test Results

  # 🎨 Frontend Testing
  test-frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: 🔍 Lint with ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: 🎯 Type check with TypeScript
      run: |
        cd frontend
        npm run type-check
    
    - name: 🧪 Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
      env:
        CI: true
        JEST_JUNIT_OUTPUT_DIR: ./test-results
        JEST_JUNIT_OUTPUT_NAME: junit.xml
    
    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: 📈 Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: frontend/test-results/junit.xml
        check_name: Frontend Test Results

  # 🔒 Security Scanning
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: 🔐 Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
        queries: security-extended,security-and-quality
    
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: 🔍 Python Security Check
      run: |
        pip install bandit safety
        cd backend
        bandit -r app -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: 🔍 Node.js Security Check
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit.json || true

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 📝 Extract metadata (tags, labels) for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: 🏗️ Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📝 Extract metadata (tags, labels) for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: 🏗️ Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.dev
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 📊 Performance Testing
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.mcp-ecosystem-platform.dev
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🎭 Deploying to staging environment..."
        echo "🔗 Staging URL: https://staging.mcp-ecosystem-platform.dev"
        # Add your staging deployment commands here
        # kubectl apply -f k8s/staging/
        # helm upgrade --install mcp-platform ./helm-chart --namespace staging

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://mcp-ecosystem-platform.dev
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        echo "🔗 Production URL: https://mcp-ecosystem-platform.dev"
        # Add your production deployment commands here
        # kubectl apply -f k8s/production/
        # helm upgrade --install mcp-platform ./helm-chart --namespace production

  # 📢 Release Notification
  notify-release:
    name: 📢 Release Notification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📢 Send release notification
      run: |
        echo "🎉 New release deployed successfully!"
        echo "🏷️ Version: ${GITHUB_REF#refs/tags/}"
        echo "🔗 Repository: ${{ github.repository }}"
        # Add notification logic here (Slack, Discord, etc.)

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 🧹 Clean up old artifacts
      run: |
        echo "🧹 Cleaning up old artifacts and cache..."
        # Add cleanup logic here