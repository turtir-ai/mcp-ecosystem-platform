"""Initial migration

Revision ID: 001
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create users table
    op.create_table('users',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('email', sa.String(length=255), nullable=False),
                    sa.Column('password_hash', sa.String(
                        length=255), nullable=False),
                    sa.Column('full_name', sa.String(
                        length=255), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('is_superuser', sa.Boolean(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('last_login', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)

    # Create mcp_servers table
    op.create_table('mcp_servers',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('name', sa.String(length=100), nullable=False),
                    sa.Column('command', sa.String(
                        length=255), nullable=False),
                    sa.Column('args', sa.JSON(), nullable=True),
                    sa.Column('env', sa.JSON(), nullable=True),
                    sa.Column('timeout', sa.Integer(), nullable=True),
                    sa.Column('retry_count', sa.Integer(), nullable=True),
                    sa.Column('health_check_interval',
                              sa.Integer(), nullable=True),
                    sa.Column('auto_restart', sa.Boolean(), nullable=True),
                    sa.Column('is_enabled', sa.Boolean(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_mcp_servers_name'),
                    'mcp_servers', ['name'], unique=True)

    # Create workflows table
    op.create_table('workflows',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('definition', sa.JSON(), nullable=False),
                    sa.Column('timeout', sa.Integer(), nullable=True),
                    sa.Column('parallel_execution',
                              sa.Boolean(), nullable=True),
                    sa.Column('on_failure', sa.String(
                        length=50), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('owner_id', sa.String(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name', 'owner_id',
                                        name='uq_workflow_name_owner')
                    )

    # Create workflow_steps table
    op.create_table('workflow_steps',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('workflow_id', sa.String(), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('step_order', sa.Integer(), nullable=False),
                    sa.Column('mcp_server_id', sa.String(), nullable=False),
                    sa.Column('tool_name', sa.String(
                        length=255), nullable=False),
                    sa.Column('arguments', sa.JSON(), nullable=True),
                    sa.Column('depends_on', sa.JSON(), nullable=True),
                    sa.Column('timeout', sa.Integer(), nullable=True),
                    sa.Column('retry_count', sa.Integer(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['mcp_server_id'], ['mcp_servers.id'], ),
                    sa.ForeignKeyConstraint(
                        ['workflow_id'], ['workflows.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('workflow_id', 'step_order',
                                        name='uq_workflow_step_order'),
                    sa.UniqueConstraint('workflow_id', 'name',
                                        name='uq_workflow_step_name')
                    )

    # Create workflow_executions table
    op.create_table('workflow_executions',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('workflow_id', sa.String(), nullable=False),
                    sa.Column('user_id', sa.String(), nullable=False),
                    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED',
                                                'FAILED', 'CANCELLED', name='workflowstatus'), nullable=True),
                    sa.Column('inputs', sa.JSON(), nullable=True),
                    sa.Column('outputs', sa.JSON(), nullable=True),
                    sa.Column('current_step', sa.String(
                        length=255), nullable=True),
                    sa.Column('error_message', sa.Text(), nullable=True),
                    sa.Column('started_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('completed_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('execution_time_ms', sa.Float(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                    sa.ForeignKeyConstraint(
                        ['workflow_id'], ['workflows.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # Create step_executions table
    op.create_table('step_executions',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('workflow_execution_id',
                              sa.String(), nullable=False),
                    sa.Column('step_name', sa.String(
                        length=255), nullable=False),
                    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED',
                                                'FAILED', 'CANCELLED', name='workflowstatus'), nullable=True),
                    sa.Column('inputs', sa.JSON(), nullable=True),
                    sa.Column('outputs', sa.JSON(), nullable=True),
                    sa.Column('error_message', sa.Text(), nullable=True),
                    sa.Column('started_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('completed_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('execution_time_ms', sa.Float(), nullable=True),
                    sa.Column('retry_count', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['workflow_execution_id'], [
                        'workflow_executions.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # Create health_checks table
    op.create_table('health_checks',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('server_id', sa.String(), nullable=False),
                    sa.Column('status', sa.Enum('HEALTHY', 'DEGRADED', 'UNHEALTHY',
                                                'OFFLINE', name='serverstatus'), nullable=False),
                    sa.Column('response_time_ms', sa.Float(), nullable=True),
                    sa.Column('error_message', sa.Text(), nullable=True),
                    sa.Column('uptime_percentage', sa.Float(), nullable=True),
                    sa.Column('version', sa.String(length=100), nullable=True),
                    sa.Column('checked_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['server_id'], ['mcp_servers.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # Create usage_events table
    op.create_table('usage_events',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('user_id', sa.String(), nullable=True),
                    sa.Column('event_type', sa.String(
                        length=100), nullable=False),
                    sa.Column('event_data', sa.JSON(), nullable=True),
                    sa.Column('session_id', sa.String(
                        length=255), nullable=True),
                    sa.Column('ip_address', sa.String(
                        length=45), nullable=True),
                    sa.Column('user_agent', sa.Text(), nullable=True),
                    sa.Column('timestamp', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_usage_events_event_type'),
                    'usage_events', ['event_type'], unique=False)

    # Create additional tables
    op.create_table('api_keys',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('service', sa.String(
                        length=100), nullable=False),
                    sa.Column('key_hash', sa.String(
                        length=255), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('last_used', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('usage_count', sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name', 'service',
                                        name='uq_api_key_name_service')
                    )

    op.create_table('review_results',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('repository_path', sa.String(
                        length=500), nullable=False),
                    sa.Column('branch', sa.String(length=255), nullable=True),
                    sa.Column('commit_hash', sa.String(
                        length=40), nullable=True),
                    sa.Column('files_analyzed', sa.Integer(), nullable=True),
                    sa.Column('issues_found', sa.Integer(), nullable=True),
                    sa.Column('security_score', sa.Float(), nullable=True),
                    sa.Column('quality_score', sa.Float(), nullable=True),
                    sa.Column('overall_score', sa.Float(), nullable=True),
                    sa.Column('recommendations', sa.JSON(), nullable=True),
                    sa.Column('findings', sa.JSON(), nullable=True),
                    sa.Column('execution_time_ms', sa.Float(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.create_table('review_findings',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('review_id', sa.String(), nullable=False),
                    sa.Column('file_path', sa.String(
                        length=500), nullable=False),
                    sa.Column('line_number', sa.Integer(), nullable=False),
                    sa.Column('severity', sa.String(
                        length=20), nullable=False),
                    sa.Column('category', sa.String(
                        length=50), nullable=False),
                    sa.Column('message', sa.Text(), nullable=False),
                    sa.Column('suggestion', sa.Text(), nullable=True),
                    sa.Column('confidence', sa.Float(), nullable=True),
                    sa.Column('rule_id', sa.String(length=100), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['review_id'], ['review_results.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.create_table('research_results',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('query', sa.String(length=500), nullable=False),
                    sa.Column('depth', sa.Integer(), nullable=True),
                    sa.Column('sources_count', sa.Integer(), nullable=True),
                    sa.Column('summary', sa.Text(), nullable=True),
                    sa.Column('insights', sa.JSON(), nullable=True),
                    sa.Column('sources', sa.JSON(), nullable=True),
                    sa.Column('execution_time_ms', sa.Float(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.create_table('system_metrics',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('metric_type', sa.String(
                        length=100), nullable=False),
                    sa.Column('value', sa.Float(), nullable=False),
                    sa.Column('unit', sa.String(length=20), nullable=True),
                    sa.Column('labels', sa.JSON(), nullable=True),
                    sa.Column('timestamp', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('system_metrics')
    op.drop_table('research_results')
    op.drop_table('review_findings')
    op.drop_table('review_results')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_usage_events_event_type'),
                  table_name='usage_events')
    op.drop_table('usage_events')
    op.drop_table('health_checks')
    op.drop_table('step_executions')
    op.drop_table('workflow_executions')
    op.drop_table('workflow_steps')
    op.drop_table('workflows')
    op.drop_index(op.f('ix_mcp_servers_name'), table_name='mcp_servers')
    op.drop_table('mcp_servers')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
